Architectures used:

    The architectures used are Model-View-Presenter (MVP) and Clean Architecture.
    It is a simplified adaptation of code found at:

        https://github.com/googlesamples/android-architecture

    which shows how a codebase gradually transitions into more sophisticated structures.

    MVP is as follows:

        [physical data] -- [model of data] -- [presenter that uses  -- [view which are dumb
                                               the model and views      UI services like
                                               to create our            widgets/buttons/etc]
                                               presentation
                                               for the user]

    Clean Architecture inserts another layer to MVP in between model and presenter. This layer
    is called the domain and consists of use cases and business logic.
    In our project, we call use cases "services" to also make this more intuitive.

    Presenters and views are both within the Activity for now as well. In order for the Activity
    to be more organized, the code is separated into five sections:

        1. Variables/Constructos/Initializers
        2. Lifecycle overrides, in order of lifecycle.
        3. Presenter functions
        4. Navigation functions
        5. Callbacks

    At the moment, the layout has heavy dependency usage because of the direct calls to Entity.
    But since we are mostly new to the technologies and concepts, it is a simpler start.

Codebase Layout:

Folders:
  main
    - data
        - entity: Different models of our user. (non-traditional use of name)
        - model: Model of data
    - domain: Use cases
    - net: Match server
    - res: Constants
    - util: Utility classes
    - (no folder): activities
  androidTest
    - general: general tests and helpers
    - SUT
    - (no folder): our activity tests
  test
    - domain: Use case tests

Glossary:
    - "pending" == either "waiting" or "confirming".
    - "documentId" == string document label